name: test-store-generic-store-version-as-config-in-git
on:
  push:
    paths:
      - 'actions/generic-store-version-as-config-in-git/**'
      - 'scripts/generic-store-version-as-config-in-git.sh'
      - 'unit-test-config/controller-config/**'
      - 'scripts/common-libs.sh'
      - '.github/workflows/unit-test-generic-store-version-as-config-in-git.yml'
  workflow_dispatch:

env:
  SU_CI_BRANCH_CONFIG_IMPORTER: su_ci_branch_config_importer
  LOWERCASE_TARGET_ENV: dev02
  ARTIFACT_BASE_NAME: settlement-utility
  # TRUFFLE_CONFIG_FILE: truffle_config

jobs:
  test-scenario-1-reader:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get repo details
        id: get-repo
        run: |
          branchName="$(echo ${GITHUB_REF_NAME} | cut -d"/" -f1)"
          if [[ ! -z "$GITHUB_HEAD_REF" ]]; then
            branchName=$(echo $GITHUB_HEAD_REF | cut -d"/" -f1)
          fi         
          echo ::set-output name=branch-name::${branchName}
          echo ::set-output name=name::$(echo ${GITHUB_REPOSITORY}  | cut -d"/" -f2)
          
      - name: Read sample SU CI Branch config
        uses: partior-libs/gcs-yaml-importer@main
        with:
          yaml-file: unit-test-config/controller-config/smc-default.yml
          query-path: .smc.ci.branches.default
          output-file: ${{ env.SU_CI_BRANCH_CONFIG_IMPORTER }}
          upload: true

  test-scenario-1-start:
    needs: [ test-scenario-1-reader ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.SU_CI_BRANCH_CONFIG_IMPORTER }}

      - name: Source env file
        id: pipeline-branch-config
        run: |
          source ./${{ env.SU_CI_BRANCH_CONFIG_IMPORTER }}

      - name: Initialize mock data
        run: |
          newVersion=$(date +"v1.0.0-%Y%m%d_%H%M")
          echo [INFO] New generated version: $newVersion
          echo ARTIFACT_VERSION=${newVersion} >> $GITHUB_ENV
          echo ARTIFACT_BASE_NAME="settlement-utility" >> $GITHUB_ENV

      - name: Store version in config
        if: steps.pipeline-branch-config.outputs.artifact_packager_enabled == 'true' && steps.pipeline-branch-config.outputs.artifact_packager_store-version_git_enabled == 'true'
        uses: partior-libs/gcs-pipe-utils/actions/generic-store-version-as-config-in-git@main
        with: 
          yaml-store-path-key: ".packages.${{ env.ARTIFACT_BASE_NAME }}.package-version"
          target-yaml-config-file: "${{ steps.pipeline-branch-config.outputs.artifact_packager_store-version_git_target-env-file }}"
          target-repo: "${{ steps.pipeline-branch-config.outputs.artifact_packager_store-version_git_repo }}"
          artifact-base-name: "${{ env.ARTIFACT_BASE_NAME }}"
          artifact-version: "${{ env.ARTIFACT_VERSION }}"
          create-if-new-config: true
          pat-token: "${{ github.token }}"
          git-push: false


