name: 'Partior - Store version as config in Git'
description: 'Store version as config in Git'
inputs:
  yaml-store-path-key:
    description: 'Query Path to the stored configuration'
    required: true
    default: ''
  yaml-env-list-query-path:
    description: 'Query Path to the list of env'
    required: false
    default: artifact.packager.store-version.git.target-envs
  target-yaml-config-file:  
    description: 'Target yaml config to be updated'
    required: true
    default: ''
  create-if-new-config:  
    description: 'Create new file if target yaml file not found'
    required: false
    default: true
  target-repo:  
    description: 'Target repo where yaml is stored'
    required: true
    default: ''
  target-repo-ref:  
    description: 'Target repo ref to be updated'
    required: false
    default: 'main'
  artifact-base-name:  
    description: 'Artifact base name to be stored in yaml'
    required: true
    default: ''
  artifact-version:  
    description: 'Artifact version to be stored in yaml'
    required: true
    default: ''
  git-push:
    description: 'Flag to indicate if git push to be executed'
    required: false
    default: true
  pat-token:
    description: 'PAT token to push code'
    required: true
    default: ''
  search-list-match-value:
    description: 'Used only during list searching. Matching value from the object @@FOUND@@'
    required: false
    default: ''
  search-list-yaml-post-query:
    description: 'Used only during list searching. Must contain @@SEARCH@@ as list object reference'
    required: false
    default: ''
  target-multi-yaml-config-files:  
    description: 'Additional yaml files to be updated. Support comma delimited.'
    required: false
    default: ''
  strict-update:  
    description: 'If true, will fail if updating failed'
    required: false
    default: 'true'
  enable-auto-filter-target-ref:
    description: 'If true, will filter the target branch with major and minor from target-repo-ref'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Filter and Finalize Branch
      id: filter-branch
      shell: bash
      run: |
        if [[ "${{ inputs.enable-auto-filter-target-ref }}" == "true" ]]; then
          # Extract the base of the branch name (e.g., "hotfix-base/25.1")
          TARGET_FILTER_BRANCH_VERSION=$(echo "${{ inputs.target-repo-ref }}" | sed -E 's|([0-9]+\.[0-9]+)\.[0-9]+$|\1|')
          echo "Searching for branches in ${{ inputs.target-repo }} containing: $TARGET_FILTER_BRANCH_VERSION"

          # Use the GitHub API to list branches that match the filter
          # The `jq` utility is used to parse the JSON response
          BRANCHES=$(curl -s -H "Authorization: token ${{ inputs.pat-token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ inputs.target-repo }}/branches" | \
            jq -r --arg filter "$TARGET_FILTER_BRANCH_VERSION" '[.[] | .name | select(contains($filter))]')

          # Count the number of branches found
          BRANCH_COUNT=$(echo "$BRANCHES" | jq 'length')
          echo "Found $BRANCH_COUNT matching branches."

          # Check if more than one branch was found
          if [[ "$BRANCH_COUNT" -gt 1 ]]; then
            echo "[Error] More than one branch found matching the filter."
            echo "Found branches: $(echo "$BRANCHES" | jq -r '. | join(", ")')"
            exit 1
          # Check if no branches were found
          elif [[ "$BRANCH_COUNT" -eq 0 ]]; then
            echo "[Error] No branches found matching the filter."
            exit 1
          # Exactly one branch was found
          else
            BRANCH_NAME=$(echo "$BRANCHES" | jq -r '.[0]')
            echo "[INFO] Successfully found unique branch: $BRANCH_NAME"
            # Set the output for other jobs to use
            echo "branch-ref=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi
        else
          TARGET_BRANCH="${{ inputs.target-repo }}"
          # The `jq` utility is used to parse the JSON response
          BRANCHES=$(curl -s -H "Authorization: token ${{ inputs.pat-token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ inputs.target-repo }}/branches" | \
            jq -r --arg filter "$TARGET_BRANCH" '[.[] | .name | select(. == $filter)]')
          # Count the number of branches found
          BRANCH_COUNT=$(echo "$BRANCHES" | jq 'length')
          echo "Found $BRANCH_COUNT matching [$TARGET_BRANCH]."

          # Check if more than one branch was found. This should not happen!!
          if [[ "$BRANCH_COUNT" -gt 1 ]]; then
            echo "[Error] More than one branch found matching [$TARGET_BRANCH]."
            echo "Found branches: $(echo "$BRANCHES" | jq -r '. | join(", ")')"
            exit 1
          # Check if no branches were found
          elif [[ "$BRANCH_COUNT" -eq 0 ]]; then
            echo "[Error] No branches found matching [$TARGET_BRANCH]."
            exit 1
          # Exactly one branch was found
          else
            BRANCH_NAME=$(echo "$BRANCHES" | jq -r '.[0]')
            echo "[INFO] Successfully found branch [$TARGET_BRANCH] at target repo."
          fi
          # Set the output for other jobs to use
          echo "branch-ref=${{ inputs.target-repo-ref }}" >> $GITHUB_OUTPUT
        fi

    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.target-repo }}
        token: ${{ inputs.pat-token }}
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        ref: ${{ steps.filter-branch.outputs.branch-ref }}

    - name: convert yaml to props config
      run: |
        ${{ github.action_path }}/../../scripts/generic-store-version-as-config-in-git.sh \
          "${{ inputs.yaml-store-path-key }}" \
          "${{ inputs.yaml-env-list-query-path }}" \
          "${{ inputs.target-yaml-config-file }}" \
          "${{ inputs.artifact-base-name }}" \
          "${{ inputs.artifact-version }}" \
          "${{ inputs.target-repo }}" \
          "${{ inputs.create-if-new-config }}" \
          "${{ inputs.pat-token }}" \
          "${{ inputs.search-list-match-value }}" \
          "${{ inputs.search-list-yaml-post-query }}" \
          "${{ inputs.target-multi-yaml-config-files }}" \
          "${{ inputs.strict-update }}"
      shell: bash
       
    - name: Push changes
      if: inputs.git-push == 'true'
      uses: partior-libs/gjs-github-push@partior-stable
      with:
        repository: ${{ inputs.target-repo }}
        github_token: ${{ inputs.pat-token }}
        branch: ${{ steps.filter-branch.outputs.branch-ref }}

    - run: echo Done storing version
      shell: bash
