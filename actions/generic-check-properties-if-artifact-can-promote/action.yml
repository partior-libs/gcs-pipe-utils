name: 'Partior - Check if artifact can be promoted'
description: 'Check artifactory if artifact can be promoted based on artifact properties'
inputs:
  source-artifact-full-path:  
    description: 'Full artifactory path to source artifact'
    required: true
    default: ''

  release-artifact-full-path:
    description: 'Full artifactory path to target release artifact'
    required: true
    default: ''

  jfrog-token:  
    description: 'Jfrog token'
    required: true
    default: ''

outputs:
  qualified:
    description: "Return check result if artifact can be promoted. true/false"
    value: ${{ steps.promotion.outputs.valid-result }}

runs:
  using: "composite"

  steps:
    - name: Setup jfrog
      uses: jfrog/setup-jfrog-cli@v2
      env:
        JF_ENV_1: ${{ inputs.jfrog-token }}

    - name: Check if source and target is identical
      id: get-properties
      env:
        SRC_ARTIFACT_PROP_JSON_FILE: src-artifact-prop-file
        RELEASE_ARTIFACT_PROP_JSON_FILE: release-artifact-prop-file
      run: |
        set +e
        validResult=false
        echo ::set-output name=valid-result::${validResult}
        function failIfEmpty() {
            local inputKey="$1"
            local inputKeyValue=${!inputKey}
            if [[ -z "$inputKeyValue" ]]; then
                echo "[ERROR] Key is undefined: $inputKey. Verify if the artifact has been deployed to promotion prerequisite env properly"
                exit 1
            fi
        }

        ${{ github.action_path }}/../../scripts/generic-curl-get-artifact-meta.sh \
            "${{ inputs.source-artifact-full-path }}" \
            "properties" \
            "${{ env.SRC_ARTIFACT_PROP_JSON_FILE }}"
        if [[ $? -ne 0 ]]; then
            echo "[ERROR] Unable to find source artifact: ${{ inputs.source-artifact-full-path }}"
            exit 1
        fi
        if [[ ! -f "${SRC_ARTIFACT_PROP_JSON_FILE}" ]]; then
            echo "[ERROR] Unable to find property file: ${SRC_ARTIFACT_PROP_JSON_FILE}"
            exit 1
        fi
        echo "[DEBUG] Start of properties:"
        cat ${SRC_ARTIFACT_PROP_JSON_FILE} 
        echo "[DEBUG] End of properties"

        PROMO_QL_FLAG=$(cat ${SRC_ARTIFACT_PROP_JSON_FILE} | jq -r '.properties."promotion.qualified"[]')
        PROMO_QL_DEPLOYED_ENV=$(cat ${SRC_ARTIFACT_PROP_JSON_FILE} | jq -r '.properties."promotion.prerequisite.deployed.env"[]')
        PROMO_QL_DEPLOYED_TIMESTAMP=$(cat ${SRC_ARTIFACT_PROP_JSON_FILE} | jq -r '.properties."promotion.prerequisite.deployed.timestamp"[]')

        GH_PR_NUMBER=$(cat ${SRC_ARTIFACT_PROP_JSON_FILE} | jq -r '.properties."github.pr_number"[]')
        GH_PR_TARGET_BRANCH=$(cat ${SRC_ARTIFACT_PROP_JSON_FILE} | jq -r '.properties."github.pr_target_branch"[]')
        GH_PR_REPO_URL=$(cat ${SRC_ARTIFACT_PROP_JSON_FILE} | jq -r '.properties."vcs.url"[]')
        GH_COMMIT_HASH=$(cat ${SRC_ARTIFACT_PROP_JSON_FILE} | jq -r '.properties."git.commit_hash"[]')
        GH_REPO=$(echo ${GH_PR_REPO_URL} | awk -F'github.com/' '{print $2}' | sed 's/.git//g')
        
        
        echo [INFO] PROMO_QL_FLAG=$PROMO_QL_FLAG
        echo [INFO] PROMO_QL_DEPLOYED_ENV=$PROMO_QL_DEPLOYED_ENV
        echo [INFO] PROMO_QL_DEPLOYED_TIMESTAMP=$PROMO_QL_DEPLOYED_TIMESTAMP
        echo [INFO] GH_PR_NUMBER=$GH_PR_NUMBER
        echo [INFO] GH_PR_TARGET_BRANCH=$GH_PR_TARGET_BRANCH
        echo [INFO] GH_PR_REPO_URL=$GH_PR_REPO_URL
        echo [INFO] GH_COMMIT_HASH=$GH_COMMIT_HASH
        echo [INFO] GH_REPO=$GH_REPO

        ## Throw error if not set
        failIfEmpty "PROMO_QL_FLAG"
        failIfEmpty "PROMO_QL_DEPLOYED_ENV"
        failIfEmpty "PROMO_QL_DEPLOYED_TIMESTAMP"

        if [[ "$PROMO_QL_FLAG" != "true" ]]; then
            echo "[ERROR] Promotion qualification flag [promotion.qualified] is false. Verify if the artifact has been deployed to promotion prerequisite env properly"
            exit 1
        fi

        ## Setting all into variables
        echo "PROMO_QL_FLAG=$PROMO_QL_FLAG" >> $GITHUB_ENV
        echo "PROMO_QL_DEPLOYED_ENV=$PROMO_QL_DEPLOYED_ENV" >> $GITHUB_ENV
        echo "PROMO_QL_DEPLOYED_TIMESTAMP=$PROMO_QL_DEPLOYED_TIMESTAMP" >> $GITHUB_ENV
        echo "GH_PR_NUMBER=$GH_PR_NUMBER" >> $GITHUB_ENV
        echo "GH_PR_TARGET_BRANCH=$GH_PR_TARGET_BRANCH" >> $GITHUB_ENV
        echo "GH_PR_REPO_URL=$GH_PR_REPO_URL" >> $GITHUB_ENV
        echo "GH_COMMIT_HASH=$GH_COMMIT_HASH" >> $GITHUB_ENV
        echo "GH_REPO=$GH_REPO" >> $GITHUB_ENV
        validResult=true
        echo ::set-output name=valid-result::${validResult}
      shell: bash


    - name: Set status
      id: promotion
      run: |
        if [[ "${{ steps.get-properties.outputs.valid-result }}" == 'true' ]]; then
            echo ::set-output name=valid-result::'true'
        else
            echo ::set-output name=valid-result::'false'
        fi
      shell: bash  
        
    - run: echo [INFO] Done checking...
      shell: bash

