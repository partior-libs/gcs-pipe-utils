name: 'Partior - SMC Backup Build Folder'
description: 'SMC backup build folder to artifactory and record version into manifest'
inputs:
  artifact-base-name:  
    description: 'Artifact base name of the deployed'
    required: true
    default: ''
  artifact-version:  
    description: 'Artifact version name of the deployed'
    required: true
    default: ''
  artifact-group:  
    description: 'Artifact group name of the deployed'
    required: true
    default: ''
  artifact-source-folder-path:  
    description: 'Folders which needs to be backup. Support comma delimited'
    required: false
    default: ''
  artifact-source-file-path:  
    description: 'Files which needs to be backup. Support comma delimited'
    required: false
    default: ''
  env-name:  
    description: 'Target environment name that is deployed'
    required: true
    default: ''
  yaml-store-file:  
    description: 'Yaml file to store the backuped version'
    required: true
    default: 'archive-deployed-artifact.scope'
  yaml-store-path-key:  
    description: 'Yaml path to store the backuped version'
    required: true
    default: 'archive-deployed-artifact.scope'
  artifactory-repo:  
    description: 'Artifactory repository name'
    required: true
    default: ''
  git-push:
    description: 'Flag to indicate if git push to be executed'
    required: false
    default: true
  artifactory-upload:
    description: 'Flag to indicate if backup needs to be uploaded'
    required: false
    default: true
  jfrog-token:
    description: 'Jfrog token to upload'
    required: false
    default: ''
  target-repo:  
    description: 'Target repo where yaml is stored'
    required: true
    default: ''
  target-repo-ref:  
    description: 'Target repo ref to be updated'
    required: false
    default: 'main'
  pat-token:
    description: 'PAT token to push code'
    required: true
    default: ''
outputs:
  generated-filename:
    description: "Filename of the converted config script"
    value: ${{ inputs.output-file }}
runs:
  using: "composite"
  steps:
    - name: Generate necessary meta data
      run: |
        storeTimeStamp=$(date +"%Y%m%d%H%M%S")
        echo TARGET_BUILD_ARTIFACT_NAME=${{ inputs.artifact-base-name }}-deployed-backup >> $GITHUB_ENV
        echo TARGET_BUILD_ARTIFACT_VERSION=${{ inputs.artifact-version }}.${storeTimeStamp} >> $GITHUB_ENV
      shell: bash 
      
    - id: packaging
      uses: partior-libs/gcs-generic-packager@partior-stable
      with:
        artifactory-target-artifact-name: ${{ env.TARGET_BUILD_ARTIFACT_NAME }}
        target-version: ${{ env.TARGET_BUILD_ARTIFACT_VERSION }}
        folder-list: ${{ inputs.artifact-source-folder-path }}
        file-list: ${{ inputs.artifact-source-file-path }}
        
    - name: Setup jfrog
      if: inputs.artifactory-upload == 'true'
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_ENV_1: ${{ inputs.jfrog-token }}

    - name: Upload to artifactory
      if: inputs.artifactory-upload == 'true'
      run: |
        jfrog rt u ${{ steps.packaging.outputs.artifact-package-name }} ${{ inputs.artifactory-repo }}/${{ inputs.artifact-group }}/${{ env.TARGET_BUILD_ARTIFACT_NAME }}/
        jfrog rt bp
      shell: bash 

    - run: |
        echo Listing env...
        set
      shell: bash

    - name: Update artifact backup version in Deployment Config
      run: |
        ${{ github.action_path }}/../../scripts/smc-backup-build-folder.sh \
          "${{ inputs.yaml-store-file }}" \
          "${{ env.TARGET_BUILD_ARTIFACT_NAME }}" \
          "${{ inputs.yaml-store-path-key }}.backup-version" \
          "${{ env.TARGET_BUILD_ARTIFACT_VERSION }}" \
          "${{ inputs.artifactory-repo }}/${{ inputs.artifact-group }}/${{ env.TARGET_BUILD_ARTIFACT_NAME }}/${{ env.TARGET_BUILD_ARTIFACT_NAME }}-${{ env.TARGET_BUILD_ARTIFACT_VERSION }}.tgz" \
          "${{ inputs.env-name }}" \
          "${{ inputs.target-repo }}" \
          "${{ inputs.pat-token }}"
      shell: bash

    - name: Push changes
      if: inputs.git-push == 'true'
      uses: partior-libs/gjs-github-push@partior-stable
      with:
        repository: ${{ inputs.target-repo }}
        github_token: ${{ inputs.pat-token }}
        branch: ${{ inputs.target-repo-ref }}

    - run: echo [INFO] Done backup artifact...
      shell: bash

