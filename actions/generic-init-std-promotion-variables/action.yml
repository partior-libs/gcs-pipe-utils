## For this action to work, it has to be executed after a matrix job where it will generate another sequence item list to be executed as sub matrix.
## It is important to note that this action expect "YAML_FINAL_PROMOTION_CONFIG_IMPORTER" already uploaded as artifact prior this action being called

name: 'Partior - Generic initialize and inject promotion variables'
description: 'Generic initialize and inject promotion variables'
inputs:
  sequence-item:  
    description: 'Item value from matrix execution while reading promotio.artifact'
    required: true
    default: ''

  pat-token:
    description: 'PAT token to push code'
    required: false
    default: ${{ github.token }}
# outputs:
#   found-list:
#     description: "List of sequence name in array"
#     value: ${{ steps.get-sequence.outputs.list }}

runs:
  using: "composite"
  steps:
    - name: Initialize promotion variables for ${{ matrix.artifact-sequence-item }}
      run: |
        currentSequenceItem="${{ inputs.sequence-item }}"
        ARTIFACT_BASE_NAME=$(echo $currentSequenceItem | awk -F'__' '{print $1}')
        SEQUENCE_ITEM_NO=$(echo $currentSequenceItem | awk -F'__' '{print $2}')
        ARTIFACT_BASE_NAME=${ARTIFACT_BASE_NAME}
        YAML_FINAL_PROMOTION_CONFIG_IMPORTER=yaml_final_promotion_config_importer_${ARTIFACT_BASE_NAME}_${{ github.run_id }}_${{ github.run_number }}

        # echo SMC_NAME=${SMC_NAME} >> $GITHUB_ENV
        echo "SEQUENCE_ITEM_NO=${SEQUENCE_ITEM_NO}" >> $GITHUB_ENV
        echo "ARTIFACT_BASE_NAME=${ARTIFACT_BASE_NAME}" >> $GITHUB_ENV
        echo "YAML_FINAL_PROMOTION_CONFIG_IMPORTER=${YAML_FINAL_PROMOTION_CONFIG_IMPORTER}" >> $GITHUB_ENV

        # echo [INFO] SMC_NAME=${SMC_NAME}
        echo [INFO] SEQUENCE_ITEM_NO=${SEQUENCE_ITEM_NO}
        echo [INFO] ARTIFACT_BASE_NAME=${ARTIFACT_BASE_NAME}
        echo [INFO] YAML_FINAL_PROMOTION_CONFIG_IMPORTER=${YAML_FINAL_PROMOTION_CONFIG_IMPORTER}
      shell: bash

    - name: Download Final Promotion importer
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.YAML_FINAL_PROMOTION_CONFIG_IMPORTER }}

    - name: Start import Final Promotion config
      id: final-promotion-config
      run: |
        echo Importing ...${{ env.YAML_FINAL_PROMOTION_CONFIG_IMPORTER }}
        source ./${{ env.YAML_FINAL_PROMOTION_CONFIG_IMPORTER }}
      shell: bash

    - uses: actions/checkout@v3
      with:
        repository: "${{ github.repository }}"
        token: "${{ inputs.pat-token }}"
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
        ref: ${{ github.ref }}

    - name: Get artifacts details for promotion
      run: |
        set +e
        promotionQueryPath=artifacts.yaml-config
        promotionQueryPathInEnv=$(echo $promotionQueryPath | sed "s/-/_/g" | sed "s/\./__/g")

        fileQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__file
        echo [DEBUG] fileQueryPath=$fileQueryPath
        fileQueryValue=${!fileQueryPath}

        versionQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__version_path
        echo [DEBUG] versionQueryPath=$versionQueryPath
        versionQueryValue=${!versionQueryPath}

        artifactBaseNameQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__artifact_base_name
        echo [DEBUG] artifactBaseNameQueryPath=$artifactBaseNameQueryPath
        artifactBaseNameQueryValue=${!artifactBaseNameQueryPath}

        artifactGroupQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__artifact_group
        echo [DEBUG] artifactGroupQueryPath=$artifactGroupQueryPath
        artifactGroupQueryValue=${!artifactGroupQueryPath}

        artiSrcRepoQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__artifactory_src_repo
        echo [DEBUG] artiSrcRepoQueryPath=$artiSrcRepoQueryPath
        artiSrcRepoQueryValue=${!artiSrcRepoQueryPath}

        artiPromoRepoQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__artifactory_promotion_repo
        echo [DEBUG] artiPromoRepoQueryPath=$artiPromoRepoQueryPath
        artiPromoRepoQueryValue=${!artiPromoRepoQueryPath}

        artifactTypeQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__artifact_type
        echo [DEBUG] artifactTypeQueryPath=$artifactTypeQueryPath
        artifactTypeQueryValue=${!artifactTypeQueryPath}

        artifactSrcVersion=$(cat ${fileQueryValue} | yq "${versionQueryValue}")
        artifactReleaseVersion=$(echo $artifactSrcVersion | cut -d"-" -f1)
        artifactSrcPackageName="${artifactBaseNameQueryValue}-${artifactSrcVersion}.${artifactTypeQueryValue}"
        artifactReleasePackageName="${artifactBaseNameQueryValue}-${artifactReleaseVersion}.${artifactTypeQueryValue}"

        jiraVersionIdentifierQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__jira_version_identifier
        echo [DEBUG] jiraVersionIdentifierQueryPath=$versionIdentifierQueryPath
        jiraVersionIdentifierQueryValue=${!jiraVersionIdentifierQueryPath}

        jiraProjectKeyQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__jira_project_key
        echo [DEBUG] jiraProjectKeyQueryPath=$jiraProjectKeyQueryPath
        projectKeyQueryValue=${!jiraProjectKeyQueryPath}
        		
        echo YAML_ARTIFACT_FILE="${fileQueryValue}" >> $GITHUB_ENV
        echo YAML_VERSION_QUERY_PATH="${versionQueryValue}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_BASE_NAME="${artifactBaseNameQueryValue}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_GROUP="${artifactGroupQueryValue}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_SRC_REPO="${artiSrcRepoQueryValue}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_PROMO_REPO="${artiPromoRepoQueryValue}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_TYPE="${artifactTypeQueryValue}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_SRC_VERSION="${artifactSrcVersion}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_RELEASE_VERSION="${artifactReleaseVersion}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_SRC_PACKAGE_NAME="${artifactSrcPackageName}" >> $GITHUB_ENV
        echo FINAL_ARTIFACT_RELEASE_PACKAGE_NAME="${artifactReleasePackageName}" >> $GITHUB_ENV
        echo JIRA_VERSION_IDENTIFIER="${versionIdentifierQueryValue}" >> $GITHUB_ENV
        echo JIRA_PROJECT_KEY="${projectKeyQueryValue}" >> $GITHUB_ENV
      shell: bash

    - name: Get git storing details
      run: |
        set +e
        promotionQueryPath=artifacts.yaml-config
        promotionQueryPathInEnv=$(echo $promotionQueryPath | sed "s/-/_/g" | sed "s/\./__/g")

        storeVersionEnabledQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__store_version__enabled
        echo [DEBUG] storeVersionEnabledQueryValue=$storeVersionEnabledQueryPath
        storeVersionEnabledQueryValue=${!storeVersionEnabledQueryPath}

        storeVersionGitEnabledQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__store_version__git__enabled
        echo [DEBUG] storeVersionGitEnabledQueryValue=$storeVersionGitEnabledQueryPath
        storeVersionGitEnabledQueryValue=${!storeVersionGitEnabledQueryPath}

        storeVersionGitRepoQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__store_version__git__repo
        echo [DEBUG] storeVersionGitRepoQueryValue=$storeVersionGitRepoQueryPath
        storeVersionGitRepoQueryValue=${!storeVersionGitRepoQueryPath}

        storeVersionGitStoreKeyQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__store_version__git__yaml_store_path_key
        echo [DEBUG] storeVersionGitStoreKeyQueryValue=$storeVersionGitStoreKeyQueryPath
        storeVersionGitStoreKeyQueryValue=${!storeVersionGitStoreKeyQueryPath}

        storeVersionGitTargetEnvFileQueryPath=${promotionQueryPathInEnv}__${SEQUENCE_ITEM_NO}__store_version__git__target_env_file
        echo [DEBUG] storeVersionGitTargetEnvFileQueryValue=$storeVersionGitTargetEnvFileQueryPath
        storeVersionGitTargetEnvFileQueryValue=${!storeVersionGitTargetEnvFileQueryPath}

        echo STORE_VERSION_ENABLE="${storeVersionEnabledQueryValue}" >> $GITHUB_ENV
        echo STORE_VERSION_GIT_ENABLE="${storeVersionGitEnabledQueryValue}" >> $GITHUB_ENV
        echo STORE_VERSION_GIT_REPO="${storeVersionGitRepoQueryValue}" >> $GITHUB_ENV
        echo STORE_VERSION_GIT_STORE_KEY="${storeVersionGitStoreKeyQueryValue}" >> $GITHUB_ENV
        echo STORE_VERSION_GIT_TARGET_ENV_FILE="${storeVersionGitTargetEnvFileQueryValue}" >> $GITHUB_ENV
      shell: bash
      
    - name: Set jfrog path
      run: |
        set +e
        function failIfEmpty() {
            local inputKey="$1"
            local inputKeyValue=${!inputKey}
            if [[ -z "$inputKeyValue" ]]; then
                echo "[ERROR] Key is undefined: $inputKey"
                exit 1
            fi
        }
        ## Throw error if not set
        failIfEmpty "FINAL_ARTIFACT_BASE_NAME"
        failIfEmpty "FINAL_ARTIFACT_GROUP"
        failIfEmpty "FINAL_ARTIFACT_SRC_REPO"
        failIfEmpty "FINAL_ARTIFACT_PROMO_REPO"
        failIfEmpty "FINAL_ARTIFACT_TYPE"
        failIfEmpty "FINAL_ARTIFACT_SRC_VERSION"
        failIfEmpty "FINAL_ARTIFACT_RELEASE_VERSION"
        failIfEmpty "FINAL_ARTIFACT_SRC_PACKAGE_NAME"
        failIfEmpty "FINAL_ARTIFACT_RELEASE_PACKAGE_NAME"

        ## Set source path
        artifactSourceFullPath=${FINAL_ARTIFACT_SRC_REPO}/${FINAL_ARTIFACT_GROUP}/${FINAL_ARTIFACT_BASE_NAME}/${FINAL_ARTIFACT_SRC_PACKAGE_NAME}
        echo FINAL_ARTIFACT_SOURCE_FULL_PATH="${artifactSourceFullPath}" >> $GITHUB_ENV

        ## Set target release path
        artifactReleaseFullPath=${FINAL_ARTIFACT_PROMO_REPO}/${FINAL_ARTIFACT_GROUP}/${FINAL_ARTIFACT_BASE_NAME}/${FINAL_ARTIFACT_RELEASE_PACKAGE_NAME}
        echo FINAL_ARTIFACT_RELEASE_FULL_PATH="${artifactReleaseFullPath}" >> $GITHUB_ENV
      shell: bash

    - name: Show retrieved details
      run: |
        echo [INFO] Listing...
        echo [INFO] YAML_ARTIFACT_FILE="${YAML_ARTIFACT_FILE}"
        echo [INFO] YAML_VERSION_QUERY_PATH="${YAML_VERSION_QUERY_PATH}"
        echo [INFO] FINAL_ARTIFACT_SRC_VERSION="${FINAL_ARTIFACT_SRC_VERSION}"
        echo [INFO] FINAL_ARTIFACT_RELEASE_VERSION="${FINAL_ARTIFACT_RELEASE_VERSION}"
        echo [INFO] FINAL_ARTIFACT_SRC_PACKAGE_NAME="${FINAL_ARTIFACT_SRC_PACKAGE_NAME}"
        echo [INFO] FINAL_ARTIFACT_RELEASE_PACKAGE_NAME="${FINAL_ARTIFACT_RELEASE_PACKAGE_NAME}"
        echo [INFO] FINAL_ARTIFACT_BASE_NAME="${FINAL_ARTIFACT_BASE_NAME}"
        echo [INFO] FINAL_ARTIFACT_GROUP="${FINAL_ARTIFACT_GROUP}"
        echo [INFO] FINAL_ARTIFACT_SRC_REPO="${FINAL_ARTIFACT_SRC_REPO}"
        echo [INFO] FINAL_ARTIFACT_PROMO_REPO="${FINAL_ARTIFACT_PROMO_REPO}"
        echo [INFO] FINAL_ARTIFACT_TYPE="${FINAL_ARTIFACT_TYPE}"
        echo [INFO] FINAL_ARTIFACT_SOURCE_FULL_PATH="${FINAL_ARTIFACT_SOURCE_FULL_PATH}"
        echo [INFO] FINAL_ARTIFACT_RELEASE_FULL_PATH="${FINAL_ARTIFACT_RELEASE_FULL_PATH}"
        echo [INFO] STORE_VERSION_ENABLE="${STORE_VERSION_ENABLE}"
        echo [INFO] STORE_VERSION_GIT_ENABLE="${STORE_VERSION_GIT_ENABLE}"
        echo [INFO] STORE_VERSION_GIT_REPO="${STORE_VERSION_GIT_REPO}"
        echo [INFO] STORE_VERSION_GIT_STORE_KEY="${STORE_VERSION_GIT_STORE_KEY}"
        echo [INFO] STORE_VERSION_GIT_TARGET_ENV_FILE="${STORE_VERSION_GIT_TARGET_ENV_FILE}"
        echo [INFO] JIRA_VERSION_IDENTIFIER="${JIRA_VERSION_IDENTIFIER}"
        echo [INFO] JIRA_PROJECT_KEY="${JIRA_PROJECT_KEY}"
      shell: bash

    - run: echo [INFO] Done injecting...
      shell: bash
